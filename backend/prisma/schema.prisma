
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int    @id @default(autoincrement())
  name    String? @default("Anonymous User")
  username String @unique
  password String
  fcmtoken String @default("NULL")
  blogs    Blog[]
  followers Follow[] @relation("userFollowers")
  following Follow[] @relation("userFollowing")
  notifications Notification[]
  reports Report[]
  comments    Comment[] // Relation to comments
}

model Blog {
  id          String   @id @default(uuid())  
  authorId    Int
  content     String
  title       String
  published   Boolean  @default(false)
  author      User     @relation(fields: [authorId], references: [id])
  reports     Report[]
  createdAt   DateTime @default(now())
  reportCount Int      @default(0)  
  likes       Int      @default(0) // Track likes
  comments    Comment[] // Relation to comments
}


model Follow {
  followerId  Int
  followingId Int
  follower  User   @relation("userFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following User   @relation("userFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([followerId, followingId])  // Composite primary key
}


model Report {
  blogId    String  
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  @@id([blogId, userId]) // Composite primary key
}


model Notification {
  recipientId Int      // User ID who receives the notification
  message     String   // Notification message
  read        Boolean  @default(false) // Whether the notification has been read
  createdAt   DateTime @default(now()) // Timestamp for when the notification was created
  recipient   User     @relation(fields: [recipientId], references: [id])
  @@id([recipientId, createdAt]) // Composite key combining recipientId and createdAt
}


model Comment {
  blogId    String
  blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())

  @@id([blogId, createdAt])  // Composite primary key
}

